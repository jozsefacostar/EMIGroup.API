// <auto-generated />
using System;
using Infraestructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infraestructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CurrentPosition")
                        .HasColumnType("int");

                    b.Property<string>("IdNum")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentPosition");

                    b.HasIndex("IdNum")
                        .IsUnique();

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("RegularJob")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Positions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PositionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PositionId");

                    b.ToTable("PositionHistories", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TokenExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("UserRole");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.HasOne("Domain.Entities.Position", "CurrentPositionNavigation")
                        .WithMany("LstPositionEmployees")
                        .HasForeignKey("CurrentPosition")
                        .HasConstraintName("FK_Employee_Position");

                    b.OwnsOne("Domain.ValueObjects.AuditInfo", "AuditInfo", b1 =>
                        {
                            b1.Property<int>("EmployeeId")
                                .HasColumnType("int");

                            b1.Property<bool>("Active")
                                .HasColumnType("bit")
                                .HasColumnName("Active");

                            b1.Property<DateTime?>("CreatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("CreatedAt");

                            b1.Property<int?>("CreatedBy")
                                .HasColumnType("int")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime?>("ModifiedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("ModifiedAt");

                            b1.Property<int?>("ModifiedBy")
                                .HasColumnType("int")
                                .HasColumnName("ModifiedBy");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.Navigation("AuditInfo")
                        .IsRequired();

                    b.Navigation("CurrentPositionNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Position", b =>
                {
                    b.OwnsOne("Domain.ValueObjects.AuditInfo", "AuditInfo", b1 =>
                        {
                            b1.Property<int>("PositionId")
                                .HasColumnType("int");

                            b1.Property<bool>("Active")
                                .HasColumnType("bit")
                                .HasColumnName("Active");

                            b1.Property<DateTime?>("CreatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("CreatedAt");

                            b1.Property<int?>("CreatedBy")
                                .HasColumnType("int")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime?>("ModifiedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("ModifiedAt");

                            b1.Property<int?>("ModifiedBy")
                                .HasColumnType("int")
                                .HasColumnName("ModifiedBy");

                            b1.HasKey("PositionId");

                            b1.ToTable("Positions");

                            b1.WithOwner()
                                .HasForeignKey("PositionId");
                        });

                    b.Navigation("AuditInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.PositionHistory", b =>
                {
                    b.HasOne("Domain.Entities.Employee", "EmployeeNavigation")
                        .WithMany("LstPositionHistoryEmployee")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_PositionHistory_Employee");

                    b.HasOne("Domain.Entities.Position", "PositionNavigation")
                        .WithMany("LstPositionHistoryPosition")
                        .HasForeignKey("PositionId")
                        .HasConstraintName("FK_PositionHistory_Position");

                    b.OwnsOne("Domain.ValueObjects.AuditInfo", "AuditInfo", b1 =>
                        {
                            b1.Property<int>("PositionHistoryId")
                                .HasColumnType("int");

                            b1.Property<bool>("Active")
                                .HasColumnType("bit")
                                .HasColumnName("Active");

                            b1.Property<DateTime?>("CreatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("CreatedAt");

                            b1.Property<int?>("CreatedBy")
                                .HasColumnType("int")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime?>("ModifiedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("ModifiedAt");

                            b1.Property<int?>("ModifiedBy")
                                .HasColumnType("int")
                                .HasColumnName("ModifiedBy");

                            b1.HasKey("PositionHistoryId");

                            b1.ToTable("PositionHistories");

                            b1.WithOwner()
                                .HasForeignKey("PositionHistoryId");
                        });

                    b.OwnsOne("Domain.ValueObjects.DateRange", "DateRange", b1 =>
                        {
                            b1.Property<int>("PositionHistoryId")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("EndDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("EndDate");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("StartDate");

                            b1.HasKey("PositionHistoryId");

                            b1.ToTable("PositionHistories");

                            b1.WithOwner()
                                .HasForeignKey("PositionHistoryId");
                        });

                    b.Navigation("AuditInfo")
                        .IsRequired();

                    b.Navigation("DateRange")
                        .IsRequired();

                    b.Navigation("EmployeeNavigation");

                    b.Navigation("PositionNavigation");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("UserRole", "UserRoleNavigation")
                        .WithMany("LstUser")
                        .HasForeignKey("UserRole")
                        .IsRequired()
                        .HasConstraintName("FK_User_UseRole");

                    b.OwnsOne("Domain.ValueObjects.AuditInfo", "AuditInfo", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<bool>("Active")
                                .HasColumnType("bit")
                                .HasColumnName("Active");

                            b1.Property<DateTime?>("CreatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("CreatedAt");

                            b1.Property<int?>("CreatedBy")
                                .HasColumnType("int")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime?>("ModifiedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("ModifiedAt");

                            b1.Property<int?>("ModifiedBy")
                                .HasColumnType("int")
                                .HasColumnName("ModifiedBy");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("AuditInfo")
                        .IsRequired();

                    b.Navigation("UserRoleNavigation");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.OwnsOne("Domain.ValueObjects.AuditInfo", "AuditInfo", b1 =>
                        {
                            b1.Property<int>("UserRoleId")
                                .HasColumnType("int");

                            b1.Property<bool>("Active")
                                .HasColumnType("bit")
                                .HasColumnName("Active");

                            b1.Property<DateTime?>("CreatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("CreatedAt");

                            b1.Property<int?>("CreatedBy")
                                .HasColumnType("int")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime?>("ModifiedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("ModifiedAt");

                            b1.Property<int?>("ModifiedBy")
                                .HasColumnType("int")
                                .HasColumnName("ModifiedBy");

                            b1.HasKey("UserRoleId");

                            b1.ToTable("UserRoles");

                            b1.WithOwner()
                                .HasForeignKey("UserRoleId");
                        });

                    b.Navigation("AuditInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.Navigation("LstPositionHistoryEmployee");
                });

            modelBuilder.Entity("Domain.Entities.Position", b =>
                {
                    b.Navigation("LstPositionEmployees");

                    b.Navigation("LstPositionHistoryPosition");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.Navigation("LstUser");
                });
#pragma warning restore 612, 618
        }
    }
}
